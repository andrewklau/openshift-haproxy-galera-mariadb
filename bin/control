#!/bin/bash -e
source $OPENSHIFT_CARTRIDGE_SDK_BASH

export STOPTIMEOUT=20
export HAPROXY_PID="${OPENSHIFT_HAPROXYMARIADB_DIR}/run/haproxy.pid"

if ! [ $# -gt 0 ]
then
    echo "Usage: \$0 [start|stop|restart|reload|force-reload|status]"
    exit 1
fi

function isrunning() {
    if [ -f "${HAPROXY_PID}" ]; then
        haproxy_pid=`cat $HAPROXY_PID 2> /dev/null`
        [ -z "$haproxy_pid" ]  &&  return 1
        current_user=`id -u`
        if `ps --pid $haproxy_pid > /dev/null 2>&1` ||     \
           `pgrep -x haproxy -u $current_user > /dev/null 2>&1`; then
            return 0
        fi
    fi
    return 1
}

function wait_to_start() {
   ep=$(grep "listen stats" $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg | sed 's#listen\s*stats\s*\(.*\)#\1#')
   i=0
   while ( ! curl "http://$ep/haproxy-status/;csv" &> /dev/null )  && [ $i -lt 10 ]; do
       sleep 1
       i=$(($i + 1))
   done

   if [ $i -ge 10 ]; then
      echo "`date`: HAProxy status check - max retries ($i) exceeded" 1>&2
   fi
}

function _start_haproxy_service() {
    if ! isrunning
    then
	oo-erb $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg.erb.hidden > $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg
cat $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg
        /usr/sbin/haproxy -f $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg #> $OPENSHIFT_HAPROXYMARIADB_DIR/logs/haproxy.log 2>&1
        wait_to_start
    else
        echo "HAProxy already running" 1>&2
        wait_to_start
    fi
}

function _stop_haproxy_service() {
    [ -f $HAPROXY_PID ]  &&  pid=$( /bin/cat "${HAPROXY_PID}" )
    if `ps -p $pid > /dev/null 2>&1`; then
        /bin/kill $pid
        ret=$?
        if [ $ret -eq 0 ]; then
            TIMEOUT="$STOPTIMEOUT"
            while [ $TIMEOUT -gt 0 ] && [ -f "$HAPROXY_PID" ]; do
                /bin/kill -0 "$pid" >/dev/null 2>&1 || break
                sleep .5
                let TIMEOUT=${TIMEOUT}-1
            done
        fi
    else
        if `pgrep -x haproxy > /dev/null 2>&1`
        then
            echo "Warning: HAProxy process exists without a pid file.  Use force-stop to kill." 1>&2
        else
            echo "HAProxy already stopped" 1>&2
        fi
    fi
}

function _restart_haproxy_service() {
    _stop_haproxy_service || pkill haproxy || :
    _start_haproxy_service
}

function _reload_haproxy_service() {
    [ -n "$1" ]  &&  zopts="-sf $1"
    /usr/sbin/haproxy -f $OPENSHIFT_HAPROXYMARIADB_DIR/conf/haproxy.cfg ${zopts} > /dev/null 2>&1
}

function _reload_service() {
    [ -f $HAPROXY_PID ]  &&  zpid=$( /bin/cat "${HAPROXY_PID}" )
    i=0
    while (! _reload_haproxy_service "$zpid" )  && [ $i -lt 60 ]; do
        sleep 2
        i=$(($i + 1))
        echo "`date`: Retrying HAProxy service reload - attempt #$((i+1)) ... "
    done

    wait_to_start
}

function start() {
    _start_haproxy_service
    isrunning  &&  echo "HAProxy instance is started"
}

function stop() {
    _stop_haproxy_service
    isrunning  ||  echo "HAProxy instance is stopped"
}

function restart() {
    _restart_haproxy_service
    isrunning  &&  echo "Restarted HAProxy instance"
}

function reload() {
    if ! isrunning; then
       _start_haproxy_service
    else
       echo "`date`: Reloading HAProxy service " 1>&2
       _reload_service
    fi

    isrunning  &&  echo "Reloaded HAProxy instance"
}

function force-reload() {
    if isrunning; then
        echo "`date`: Conditionally reloading HAProxy service " 1>&2
        _reload_service
        isrunning  &&  echo "Conditionally reloaded HAProxy"
    fi
}

function status() {
    if isrunning; then
        client_result "HAProxy instance is running"
    else
        client_result "HAProxy instance is stopped"
    fi
}

case "$1" in
    start)          start               ;;
    stop)           stop                ;;
    restart)        restart             ;;
    reload)         reload              ;;
    force-reload)   force-reload        ;;
    status)         status              ;;
esac
